// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nis.Core.Persistence;

#nullable disable

namespace Nis.Core.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220606230243_drop_patients_table")]
    partial class drop_patients_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Nis.Core.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_diagnoses");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_diagnoses_department_id");

                    b.ToTable("diagnoses", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_diets");

                    b.ToTable("diets", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("anamnesis");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("department_id");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("diagnosis_id");

                    b.Property<int>("DietId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("diet_id");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_exams_department_id");

                    b.HasIndex("DiagnosisId")
                        .HasDatabaseName("ix_exams_diagnosis_id");

                    b.HasIndex("DietId")
                        .HasDatabaseName("ix_exams_diet_id");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.MedicalScales.Scale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("ScaleType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scale_type");

                    b.HasKey("Id")
                        .HasName("pk_scales");

                    b.ToTable("scales", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.MedicalScales.ScaleActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("ScaleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scale_id");

                    b.Property<float>("Score")
                        .HasColumnType("REAL")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_scale_activities");

                    b.HasIndex("ScaleId")
                        .HasDatabaseName("ix_scale_activities_scale_id");

                    b.ToTable("scale_activities", (string)null);
                });

            modelBuilder.Entity("Nis.Core.Models.Diagnosis", b =>
                {
                    b.HasOne("Nis.Core.Models.Department", "Department")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_diagnoses_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Nis.Core.Models.Exam", b =>
                {
                    b.HasOne("Nis.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_departments_department_id");

                    b.HasOne("Nis.Core.Models.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_diagnoses_diagnosis_id");

                    b.HasOne("Nis.Core.Models.Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_diets_diet_id");

                    b.Navigation("Department");

                    b.Navigation("Diagnosis");

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("Nis.Core.Models.MedicalScales.ScaleActivity", b =>
                {
                    b.HasOne("Nis.Core.Models.MedicalScales.Scale", null)
                        .WithMany("Activities")
                        .HasForeignKey("ScaleId")
                        .HasConstraintName("fk_scale_activities_scales_scale_id");
                });

            modelBuilder.Entity("Nis.Core.Models.Department", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("Nis.Core.Models.MedicalScales.Scale", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
